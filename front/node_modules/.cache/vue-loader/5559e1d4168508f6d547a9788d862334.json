{"remainingRequest":"D:\\其他\\刘老师\\项目\\华胜投标招标\\bidding-agent-be\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\其他\\刘老师\\项目\\华胜投标招标\\bidding-agent-be\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\其他\\刘老师\\项目\\华胜投标招标\\bidding-agent-be\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\其他\\刘老师\\项目\\华胜投标招标\\bidding-agent-be\\front\\src\\views\\order_details\\index.vue?vue&type=template&id=7584776a&scoped=true&","dependencies":[{"path":"D:\\其他\\刘老师\\项目\\华胜投标招标\\bidding-agent-be\\front\\src\\views\\order_details\\index.vue","mtime":1698043823257},{"path":"D:\\其他\\刘老师\\项目\\华胜投标招标\\bidding-agent-be\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681715802937},{"path":"D:\\其他\\刘老师\\项目\\华胜投标招标\\bidding-agent-be\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1681715801292},{"path":"D:\\其他\\刘老师\\项目\\华胜投标招标\\bidding-agent-be\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681715802937},{"path":"D:\\其他\\刘老师\\项目\\华胜投标招标\\bidding-agent-be\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1681715801225}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}